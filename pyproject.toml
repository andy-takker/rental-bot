[tool.poetry]
name = "rental-bot"
version = "0.1.0"
description = "Rental bot"
authors = ["Sergey Natalenko <sergey.natalenko@mail.ru>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
sqlalchemy = "^2.0.36"
aiogram-dialog = "^2.2.0"
aiohttp = "3.10.11"
alembic = "^1.14.0"
asyncly = "^0.3.3"
dishka = "^1.4.2"
asyncpg = "^0.30.0"


[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
mypy = "^1.13.0"
ruff = "^0.8.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"
python_files = "test_*"
python_functions = "test_*"
python_classes = "TestSuite*"
addopts = "-p no:cacheprovider"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.report]
show_missing = true
skip_covered = false
skip_empty = true
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == __main__:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "...",
    "pass",
]

[tool.coverage.run]
branch = true
source = ["exchange_service"]
command_line = "-m pytest"

[tool.coverage.xml]
output = "coverage.xml"

[tool.ruff]
line-length = 88
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
]
indent-width = 4
target-version = "py312"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
select = [
    "BLE",
    "C90",
    "E",
    "F",
    "G",
    "I",
    "ICN",
    "ISC",
    "PLE",
    "Q",
    "RUF006",
    "RUF100",
    "T10",
    "T20",
    "TID",
    "UP",
    "W",
]
ignore = ["ISC001"]
fixable = ["ALL"]

[tool.ruff.lint.isort]
known-first-party = ["rental_bot", "tests"]

[tool.mypy]
plugins = ["pydantic.mypy"]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_optional = true
